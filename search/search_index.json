{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Utronics sells a rackmount kit for rasberry pi's.</p> <p>The fixture has a small screen which is labeled UC-776 Rev B.  This is probably Utronics internal model number as a quick google search doesn't return any devices with that model number.</p> <p></p> <p>This device seems to be a SSD1306 128x32 oled screen.  I'm making some assumptions given what it looks like as compared to other devices as well as references to SSD1306 in the C codebase.</p> <p>Further inspection of the C package reveals that there's an initialization routine for the device.  Interfacing with the device requires connecting to the I2C address for the oled screen.</p> <p>Note I2C stands for Inter-Integrated Circuit (I2C). There's a good tutorial on I2C which can be found here: https://learn.adafruit.com/scanning-i2c-addresses/i2c-basics</p> <p>Looking around, there's already an I2C golang package for generally interfacing with an I2C device.  Hopefully now it's just a matter of writing and reading the correct values to the device.</p>"},{"location":"#device-address-and-i2c-bus-allocation","title":"Device Address and I2C bus allocation","text":"<pre><code>$ i2cdetect -y 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:                         -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- --\n</code></pre>"}]}